name: Update Tyk OAS APIs

on:
  push:
    branches:
      - master

jobs:
  process_commits:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up environment variables
      run: |
        echo "TOKEN=${{ secrets.API_TOKEN }}" >> $GITHUB_ENV
        echo "BASE_URL=${{ secrets.BASE_API_URL }}" >> $GITHUB_ENV
        echo "FILE_REGEX=*.oas.json$" >> $GITHUB_ENV

    - name: Get parent commit SHA
      id: get_parent_commit_sha
      run: |
        echo "parent_commit_sha=$(git log --pretty=format:%H -n 1)" >> $GITHUB_OUTPUT

    - name: Extract query parameters from manifest.json
      id: extract_query_params
      run: |
        content=$(cat "manifest.json")
        # Declare an associative array for query parameters
        declare -A params_array
        # Declare an associative array for api_ids
        declare -A api_ids_array

        # Loop through each key in the manifest.json file
        while IFS= read -r key; do
          # Extract the api_id for the current key
          api_id=$(echo "$content" | jq -r ".[\"$key\"].api_id")
          # Extract the parameters and convert them to a query string format
          params=$(echo "$content" | jq -r ".[\"$key\"].params | to_entries | map(\"\(.key)=\(.value|tostring)\") | join(\"&\")")
          
          # Store the query parameters in the params_array
          params_array["$key"]="$params"
          # Store the api_id in the api_ids_array
          api_ids_array["$key"]="$api_id"
        done < <(jq -r 'keys[]' "manifest.json")

        # Initialize a string to hold the JSON output for query parameters
        json_params="{"
        # Initialize a string to hold the JSON output for api_ids
        json_api_ids="{"

        # Construct JSON strings for both query parameters and api_ids
        for key in "${!params_array[@]}"; do
          json_params+="\"$key\":\"${params_array[$key]}\","
          json_api_ids+="\"$key\":\"${api_ids_array[$key]}\","
        done

        # Remove the trailing comma from both JSON strings
        json_params=${json_params%,}
        json_params+="}"

        json_api_ids=${json_api_ids%,}
        json_api_ids+="}"

        # Output the variables to $GITHUB_OUTPUT
        echo "queryParams=$json_params" >> $GITHUB_OUTPUT
        echo "apiIds=$json_api_ids" >> $GITHUB_OUTPUT

    - name: Iterate over committed files and make requests
      env:
        TOKEN: ${{ secrets.API_TOKEN }}
        BASE_URL: ${{ secrets.BASE_URL }}
        PARENT_COMMIT_SHA: ${{ steps.get_parent_commit_sha.outputs.parent_commit_sha }}
        QUERY_PARAMS: ${{ steps.extract_query_params.outputs.queryParams }}
        API_IDS: ${{ steps.extract_query_params.outputs.apiIds }}
      run: |
        echo "Start iterating"
        echo $PARENT_COMMIT_SHA
        echo HEAD
        git diff-tree --no-commit-id --name-only -r $PARENT_COMMIT_SHA
        for file in $(git diff-tree --no-commit-id --name-only -r $PARENT_COMMIT_SHA | grep -E "$FILE_REGEX"); do
            # if [[ $file == *"/"* ]]; then
            #   continue
            # fi
            # if [[ $file == *"manifest.json" ]]; then
            #   echo "Skipping file: $file"
            #   continue
            # fi
            content=$(cat "$file")
            echo "Processing file: $file"
            #echo "File content: $content"
            filename=$(basename -- "$file")
            filename="${filename%.*}"
            echo $FILE_REGEX
            echo $file
            if [[ $file =~ $FILE_REGEX ]]; then
              apiID="${BASH_REMATCH[1]}"
              echo "Extracted ID inside if: $apiID"
            else
              echo "No ID found."
            fi
            echo "Processing file: $file"
            echo "Filename: $filename"
            query_params=$(echo "$QUERY_PARAMS" | jq -r ".[\"$filename\"]")
            echo "QUERY PARAMS"
            echo $query_params
            apiID=$(echo "$API_IDS" | jq -r ".[\"$filename\"]")
            echo "API ID"
            echo $apiID
            importEndpoint="/api/apis/oas/import"
            endpoint="/api/apis/oas/$apiID"
            echo "Endpoint: $BASE_URL$endpoint"
          
            # Check if API exists with a GET request
            echo "Sending GET request to $BASE_URL$endpoint"
            response=$(curl -s -o /dev/null -w "%{http_code}" -X GET -H "Authorization: ${TOKEN}" --location "${BASE_URL}${endpoint}")
            echo "Response: $response"

            if [ $response -eq 200 ]; then
              echo "API with ID $apiID already exists. Performing PATCH request."
              echo "${BASE_URL}${endpoint}"
              response=$(curl -s -o /dev/null -w "%{http_code}" -X PATCH -H "Authorization: $TOKEN" -H "Content-Type: application/json" -d "$content" "${BASE_URL}${endpoint}?${query_params}")
              if [ $response -eq 200 ]; then
                echo "API has been patched with a new OAS request succeeded."
              else
                echo "API Patch request failed with status code $response."
              fi
            else
              echo "API with ID $apiID does not exist. Performing IMPORT request."
              echo "${BASE_URL}${importEndpoint}"
              # Add apiID query parameter to the POST request
              response=$(curl -s -o /dev/null -w "%{http_code}" -X POST -H "Authorization: $TOKEN" -H "Content-Type: application/json" -d "$content" "${BASE_URL}${importEndpoint}?apiID=$apiID&${query_params}")
              if [ $response -eq 200 ]; then
                echo "Import of OAS request succeeded."
              else
                echo "Import of OAS request failed with status code $response."
                echo "Response: $response"
              fi
            fi
        done
